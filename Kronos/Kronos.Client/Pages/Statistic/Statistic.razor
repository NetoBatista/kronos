@page "/statistic"

<PageTitle>Kronos - Estatística</PageTitle>

<main class="overflow-auto pb-lg-5" style="height: 84vh">
    <div class="mt-2 mb-4">
        <LoadingComponent IsInLineProgress="true" Visible="IsLoading"></LoadingComponent>
    </div>
    <div @attributes="GetCanvasTotalLogsAttributes()">
        <canvas id="chart-total-logs"></canvas>
    </div>
    
    <div class="d-flex flex-wrap mt-5">
        @foreach (var item in _statisticResponseDto.CountTypes)
        {
            <div class="me-3 ms-3 mb-5" style="height: 300px; width: 300px">
                <b class="overflow-hidden d-flex ms-1 me-2" style="text-overflow: ellipsis; white-space: nowrap;">
                    @item.ApplicationName
                </b>
                <div class="card p-3">
                    <canvas @attributes="GetCanvasTypeLogsAttributes(item.ApplicationId)"></canvas>
                </div>
            </div>
        }
    </div>
</main>

@code {
    [Inject]
    private IChartProvider ChartProvider { get; set; } = default!;
    private readonly StatisticHandler _statisticHandler = new();
    private bool IsLoading { get; set; } = true;
    private StatisticResponseDto _statisticResponseDto = new();
    private int _heightTotalLog = 100;

    private Dictionary<string, object> GetCanvasTypeLogsAttributes(Guid index)
    {
        return new Dictionary<string, object>
        {
            { "id", $"chart-type-logs-{index}" },
        };
    }
    
    private Dictionary<string, object> GetCanvasTotalLogsAttributes()
    {
        return new Dictionary<string, object>
        {
            { "style", $"height: {_heightTotalLog}px; width: 100%;" }
        };
    }
    
    string GetShortApplicationName(string input)
    {
        return input.Length > 10 ? $"{input.Substring(0,10)}..." : input;
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        IsLoading = true;
        
        var currentDate = DateTime.UtcNow;
        var startDate = new DateTime(currentDate.Year, currentDate.Month, 1);
        var endDate = new DateTime(currentDate.Year, currentDate.Month + 1, 1, 23, 59 ,59).AddDays(-1);
        var request = new StatisticRequestDto
        {
            StartDate = startDate,
            EndDate = endDate
        };
        
        var response = await _statisticHandler.Get(request);
        
        IsLoading = false;
        
        if (response == null)
        {
            StateHasChanged();
            return;
        }

        _statisticResponseDto = response;
        _heightTotalLog = 80 * _statisticResponseDto.Totals.Count;
        
        StateHasChanged();
        
        await RenderTotalLogs();
        foreach (var item in _statisticResponseDto.CountTypes)
        {
            await RenderTypeLogs(item);
        }
    }

    private async Task RenderTotalLogs()
    {
        var chartModel = new ChartModel
        {
            Type = "bar",
            Data = new ChartData
            {
                Labels = _statisticResponseDto.Totals.Select(x => GetShortApplicationName(x.ApplicationName)).ToList(),
                Datasets =
                [
                    new ChartDataset
                    {
                        Label = "Total de logs",
                        Data = _statisticResponseDto.Totals.Select(x => x.Total).ToList(),
                        BorderWidth = 1,
                        BackgroundColor = ["#6f42c1", "#6f42c1"],
                        Axis = "y",
                        Fill = false,
                    }
                ]
            },
            Options = new ChartOptions
            {
                IndexAxis = "y",
                Scales = new ChartScale
                {
                    Y = new ChartY
                    {
                        BeginAtZero = true,
                        Grid = new ChartGrid
                        {
                            Color = "#8080802e"
                        }
                    },
                    X = new ChartX
                    {
                        Grid = new ChartGrid
                        {
                            Color = "#8080802e"
                        }
                    }
                },
                Responsive = true,
                MaintainAspectRatio = false
            }
        };
        await ChartProvider.RenderChart("chart-total-logs", chartModel);
    }
    
    private async Task RenderTypeLogs(StatisticCountTypeLogItemResponseDto item)
    {
        var chartModel = new ChartModel
        {
            Type = "pie",
            Data = new ChartData
            {
                Labels = [
                    $"{LogTypeTranslate.Translate(LogConstant.Success)} - {item.CountSuccess}",
                    $"{LogTypeTranslate.Translate(LogConstant.Info)} - {item.CountInfo}",
                    $"{LogTypeTranslate.Translate(LogConstant.Error)} - {item.CountError}",
                ],
                Datasets =
                [
                    new ChartDataset
                    {
                        Label = item.ApplicationName,
                        Data = [item.CountSuccess, item.CountInfo, item.CountError],
                        BorderWidth = 1,
                        BackgroundColor = [
                            GetClassLogType(LogConstant.Success),
                            GetClassLogType(LogConstant.Info),
                            GetClassLogType(LogConstant.Error),
                        ],
                        Axis = "y",
                        Fill = false,
                    }
                ]
            },
            Options = new ChartOptions
            {
                Responsive = true,
                MaintainAspectRatio = false
            }
        };
        await ChartProvider.RenderChart($"chart-type-logs-{item.ApplicationId}", chartModel);
    }
    
    
    
    private string GetClassLogType(string type)
    {
        switch (type)
        {
            case LogConstant.Success:
                return "#198754";
            case LogConstant.Error:
                return "#dc3545";
            case LogConstant.Info:
                return "#ffc107";
            default:
                return string.Empty;
        }
    }
}
