
<main>
    <div class="d-flex gap-2 cursor-pointer" style="max-width: 300px" @onclick="OnClickChangeDate">
        <h2>
            @DateUtil.GetMonth(_startDate.Month)
        </h2>
        <h2>
            de
        </h2>
        <h2>
            @_startDate.Year
        </h2>
        <svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" fill="currentColor" class="bi bi-calendar mt-1" viewBox="0 0 16 16">
            <path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5M1 4v10a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V4z"/>
        </svg>
    </div>
    <div class="mt-2 mb-4">
        <LoadingComponent IsInLineProgress="true" Visible="IsLoading"></LoadingComponent>
    </div>
    
    @if (_statisticResponseDto.Totals.Count == 0 && !IsLoading)
    {
        <div>
            <span>Nenhum dado encontrado</span>
        </div>
    }
    
    @if (_statisticResponseDto.Totals.Count > 0)
    {
        <div @attributes="GetCanvasTotalLogsAttributes()">
            <canvas id="chart-total-logs"></canvas>
        </div>
    }

    <div class="d-flex flex-wrap mt-5">
        @foreach (var item in _statisticResponseDto.CountTypes)
        {
        <div class="me-3 ms-3 mb-5" style="height: 300px; width: 300px">
            <b class="overflow-hidden d-flex ms-1 me-2" style="text-overflow: ellipsis; white-space: nowrap;">
                @item.ApplicationName
            </b>
            <div class="card p-3">
                <canvas @attributes="GetCanvasTypeLogsAttributes(item.ApplicationId)"></canvas>
            </div>
        </div>
        }
    </div>
</main>

@code {
    [Inject]
    private IDialogProvider DialogProvider { get; set; } = default!;
    [Inject]
    private IChartProvider ChartProvider { get; set; } = default!;
    private readonly StatisticHandler _statisticHandler = new();
    private bool IsLoading { get; set; } = true;
    private int _heightTotalLog = 100;
    private StatisticResponseDto _statisticResponseDto = new();
    private DateTime _startDate = DateTime.UtcNow;
    private DateTime _endDate = DateTime.UtcNow;
    
    protected override void OnInitialized()
    {
        var currentDate = DateTime.UtcNow;
        _startDate = new DateTime(currentDate.Year, currentDate.Month, 1);
        _endDate = new DateTime(currentDate.Year, currentDate.Month, 1, 23, 59 ,59).AddMonths(1).AddDays(-1);
    }
    
    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return Task.CompletedTask;
        }

        return GetResume();
    }
    
    private async Task GetResume()
    {
        IsLoading = true;
        
        var request = new StatisticRequestDto
        {
            StartDate = _startDate,
            EndDate = _endDate
        };
        
        var response = await _statisticHandler.Get(request);
        
        IsLoading = false;
        
        if (response == null)
        {
            _statisticResponseDto = new();
            StateHasChanged();
            return;
        }

        _statisticResponseDto = response;
        _heightTotalLog = 80 * _statisticResponseDto.Totals.Count;
        
        StateHasChanged();
        
        await RenderTotalLogs();
        foreach (var item in _statisticResponseDto.CountTypes)
        {
            await RenderTypeLogs(item);
        }
    }

    private void OnClickChangeDate()
    {
        void SuccessCallback(DateTime input)
        {
            _startDate = new DateTime(input.Year, input.Month, 1);
            _endDate = new DateTime(input.Year, input.Month, 1, 23, 59 ,59).AddMonths(1).AddDays(-1);
            _ = GetResume();
        }

        RenderFragment content = __builder =>
        {
            <StatisticChangeDateResume SuccessCallback="SuccessCallback" SelectedDate="_startDate">
                
            </StatisticChangeDateResume>
        };
        DialogProvider.OpenDialog("Escolha uma data", content);
    }
    
    private Dictionary<string, object> GetCanvasTypeLogsAttributes(Guid index)
    {
        return new Dictionary<string, object>
        {
            { "id", $"chart-type-logs-{index}" },
        };
    }
    
    private Dictionary<string, object> GetCanvasTotalLogsAttributes()
    {
        return new Dictionary<string, object>
        {
            { "style", $"height: {_heightTotalLog}px; width: 100%;" }
        };
    }
    
    string GetShortApplicationName(string input)
    {
        return input.Length > 10 ? $"{input.Substring(0,10)}..." : input;
    }

    private async Task RenderTotalLogs()
    {
        var chartModel = new ChartModel
        {
            Type = "bar",
            Data = new ChartData
            {
                Labels = _statisticResponseDto.Totals.Select(x => GetShortApplicationName(x.ApplicationName)).ToList(),
                Datasets =
                [
                    new ChartDataset
                    {
                        Label = "Total de logs",
                        Data = _statisticResponseDto.Totals.Select(x => x.Total).ToList(),
                        BorderWidth = 1,
                        BackgroundColor = ["#6f42c1", "#6f42c1"],
                        Axis = "y",
                        Fill = false,
                    }
                ]
            },
            Options = new ChartOptions
            {
                IndexAxis = "y",
                Scales = new ChartScale
                {
                    Y = new ChartY
                    {
                        BeginAtZero = true,
                        Grid = new ChartGrid
                        {
                            Color = "#8080802e"
                        }
                    },
                    X = new ChartX
                    {
                        Grid = new ChartGrid
                        {
                            Color = "#8080802e"
                        }
                    }
                },
                Responsive = true,
                MaintainAspectRatio = false
            }
        };
        await ChartProvider.RenderChart("chart-total-logs", chartModel);
    }
    
    private async Task RenderTypeLogs(StatisticCountTypeLogItemResponseDto item)
    {
        var chartModel = new ChartModel
        {
            Type = "pie",
            Data = new ChartData
            {
                Labels = [
                    $"{LogTypeTranslate.Translate(LogConstant.Success)} - {item.CountSuccess}",
                    $"{LogTypeTranslate.Translate(LogConstant.Info)} - {item.CountInfo}",
                    $"{LogTypeTranslate.Translate(LogConstant.Error)} - {item.CountError}",
                ],
                Datasets =
                [
                    new ChartDataset
                    {
                        Label = item.ApplicationName,
                        Data = [item.CountSuccess, item.CountInfo, item.CountError],
                        BorderWidth = 1,
                        BackgroundColor = [
                            GetClassLogType(LogConstant.Success),
                            GetClassLogType(LogConstant.Info),
                            GetClassLogType(LogConstant.Error),
                        ],
                        Axis = "y",
                        Fill = false,
                    }
                ]
            },
            Options = new ChartOptions
            {
                Responsive = true,
                MaintainAspectRatio = false
            }
        };
        await ChartProvider.RenderChart($"chart-type-logs-{item.ApplicationId}", chartModel);
    }
    
    
    
    private string GetClassLogType(string type)
    {
        switch (type)
        {
            case LogConstant.Success:
                return "#198754";
            case LogConstant.Error:
                return "#dc3545";
            case LogConstant.Info:
                return "#ffc107";
            default:
                return string.Empty;
        }
    }
}