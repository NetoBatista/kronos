<div>
    <div class="modal-body">
        <div class="mb-3">
            <label class="form-label">Nome da aplicação</label>
            <input type="email" class="form-control" placeholder="Ex: Kronos" @bind="Request.Name" maxlength="100">
        </div>
        <div class="mb-3">
            <label class="form-label">Health check (opcional)</label>
            <input type="email" class="form-control" placeholder="Ex: http://kronos.com.br/ping" @bind="Request.HealthCheck" maxlength="1000">
        </div>
        <div class="alert alert-warning @ClassInvalidName">
            <span>O nome da aplicação é obrigatório</span>
        </div>
    </div>
    <div class="modal-footer d-flex gap-2">
        <button type="button" class="btn btn-outline-secondary" @onclick="DialogProvider.CloseDialog">Cancelar</button>
        <button type="button" class="btn btn-primary" @onclick="OnClickUpdateApplication">Confirmar</button>
    </div>
</div>

@code {
    [Inject]
    private DialogProvider DialogProvider { get; set; } = default!;

    [Parameter]
    public EventCallback<ApplicationResponseDTO> SuccessCallback { get; set; } = default!;

    private readonly ApplicationHandler _applicationHandle = new();

    [Parameter]
    public ApplicationUpdateRequestDTO Request { get; set; } = default!;

    private bool IsSubmitted { get; set; }

    private string ClassInvalidName => IsSubmitted && string.IsNullOrEmpty(Request.Name) ? string.Empty : "d-none";

    private async Task OnClickUpdateApplication()
    {
        IsSubmitted = true;
        if (string.IsNullOrEmpty(Request.Name))
        {
            return;
        }
        var response = await _applicationHandle.Update(Request);
        if (response != null)
        {
            await SuccessCallback.InvokeAsync(response);
            DialogProvider.CloseDialog();
        }
    }
}
