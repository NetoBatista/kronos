@page "/application"

<PageTitle>Kronos - Aplicação</PageTitle>

<div>
    <div class=" d-flex">
        <div class="d-flex w-100" style="max-width: 400px">
            <span class="position-absolute ms-2 d-flex align-items-center" style="height: 38px;">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-search" viewBox="0 0 16 16">
                    <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001q.044.06.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1 1 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0" />
                </svg>
            </span>
            <input class="form-control" style="padding-left: 2.0rem;" placeholder="Pesquisar" @oninput="OnInputEvent" />
        </div>
        <button class="btn btn-primary ms-2" style="min-width: 140px" @onclick="OnClickCreateApplication">Criar aplicação</button>
    </div>
    <div class="overflow-auto" style="height: 80vh;">
        <div class="d-flex flex-wrap mt-4 gap-2">
            @foreach (var application in FilteredApplications())
            {
                <div class="card" style="width: 22rem;">
                    <div class="card-body d-grid">
                        <h5 class="card-title text-nowrap overflow-hidden">@application.Name</h5>
                        <span class="card-subtitle mb-2 text-body-secondary"># @application.Key</span>
                        <div class="d-flex mt-2 gap-4">
                            <button class="btn btn-outline-danger mw-100" style="width: 100%" @onclick=@(() => OnClickDeleteApplication(application))>
                                Excluir
                            </button>
                            <button class="btn btn-outline-primary mw-100" style="width: 100%" @onclick=@(() => OnClickUpdateApplication(application))>
                                Editar
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Inject]
    private DialogProvider DialogProvider { get; set; } = default!;

    private ApplicationData ApplicationData = new();

    private List<ApplicationResponseDTO> Applications = [];

    private string SearchContent { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        Applications = await ApplicationData.Get();
    }

    private void OnInputEvent(ChangeEventArgs eventArgs)
    {
        SearchContent = eventArgs.Value?.ToString() ?? string.Empty;
    }

    private List<ApplicationResponseDTO> FilteredApplications()
    {
        if (string.IsNullOrEmpty(SearchContent))
        {
            return Applications;
        }

        return Applications.Where(x => x.Name.ToUpper().Contains(SearchContent.ToUpper())).ToList();
    }

    private void OnClickCreateApplication()
    {
        void SuccessCallback(ApplicationResponseDTO application)
        {
            Applications.Insert(0, application);
        }

        RenderFragment content = __builder =>
        {
            <CreateApplication SuccessCallback="SuccessCallback"></CreateApplication>
        };
        DialogProvider.OpenDialog("Nova aplicação", content);
    }

    private void OnClickUpdateApplication(ApplicationResponseDTO application)
    {
        void SuccessCallback(ApplicationResponseDTO updatedApplication)
        {
            var indexApplication = Applications.IndexOf(application);
            Applications.RemoveAt(indexApplication);
            Applications.Insert(indexApplication, updatedApplication);
        }

        var request = AutoMapper.Map<ApplicationUpdateRequestDTO>(application)!;

        RenderFragment content = __builder =>
        {
            <UpdateApplication Request="request" SuccessCallback="SuccessCallback"></UpdateApplication>
        };
        DialogProvider.OpenDialog("Atualizar aplicação", content);
    }

    private void OnClickDeleteApplication(ApplicationResponseDTO application)
    {
        void SuccessCallback()
        {
            var indexApplication = Applications.IndexOf(application);
            Applications.RemoveAt(indexApplication);
        }

        RenderFragment content = __builder =>
        {
            <DeleteApplication Request="application" SuccessCallback="SuccessCallback"></DeleteApplication>
        };
        DialogProvider.OpenDialog("Remover aplicação", content);
    }
}
