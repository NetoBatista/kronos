// <auto-generated />
using System;
using Kronos.Domain.Entity;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Kronos.Domain.Migrations
{
    [DbContext(typeof(KronosContext))]
    [Migration("20240327204311_UpdateHealthCheckToNullable")]
    partial class UpdateHealthCheckToNullable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Kronos.Domain.Entity.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdat");

                    b.Property<string>("HealthCheck")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("healthcheck");

                    b.Property<Guid>("Key")
                        .HasColumnType("uuid")
                        .HasColumnName("key");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("application_pkey");

                    b.HasIndex(new[] { "Name" }, "application_name_key")
                        .IsUnique();

                    b.ToTable("application", (string)null);
                });

            modelBuilder.Entity("Kronos.Domain.Entity.HealthCheck", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid")
                        .HasColumnName("applicationid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdat");

                    b.Property<bool>("Success")
                        .HasColumnType("boolean")
                        .HasColumnName("success");

                    b.HasKey("Id")
                        .HasName("healthcheck_pkey");

                    b.HasIndex("ApplicationId");

                    b.ToTable("healthcheck", (string)null);
                });

            modelBuilder.Entity("Kronos.Domain.Entity.Log", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid")
                        .HasColumnName("applicationid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdat");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("log_pkey");

                    b.HasIndex("ApplicationId");

                    b.ToTable("log", (string)null);
                });

            modelBuilder.Entity("Kronos.Domain.Entity.HealthCheck", b =>
                {
                    b.HasOne("Kronos.Domain.Entity.Application", "ApplicationNavigation")
                        .WithMany("HealthCheckNavigation")
                        .HasForeignKey("ApplicationId")
                        .IsRequired()
                        .HasConstraintName("healthcheck_applicationid_fkey");

                    b.Navigation("ApplicationNavigation");
                });

            modelBuilder.Entity("Kronos.Domain.Entity.Log", b =>
                {
                    b.HasOne("Kronos.Domain.Entity.Application", "ApplicationNavigation")
                        .WithMany("LogNavigation")
                        .HasForeignKey("ApplicationId")
                        .IsRequired()
                        .HasConstraintName("log_applicationid_fkey");

                    b.Navigation("ApplicationNavigation");
                });

            modelBuilder.Entity("Kronos.Domain.Entity.Application", b =>
                {
                    b.Navigation("HealthCheckNavigation");

                    b.Navigation("LogNavigation");
                });
#pragma warning restore 612, 618
        }
    }
}
